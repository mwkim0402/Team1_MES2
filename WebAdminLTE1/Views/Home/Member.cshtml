

@{
    ViewBag.Title = "Member";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1> 근태 현황판 </h1>

<style>
    table {
        text-align: center;
        width: 100%;
        background-color: dimgray;
        height: 70%;
        /*float: left;*/
    }

    button {
        border: 1px solid darkgray;
        background-color: rgba(0,0,0,0);
        color: #FFFFFF;
    }
</style>

<script language="javascript">

    var today = new Date(); // 오늘 날짜
    var date = new Date();

    function beforem() //이전 달을 today에 값을 저장
    {
        today = new Date(today.getFullYear(), today.getMonth() - 1, today.getDate());
        build(); //만들기
    }

    function nextm()  //다음 달을 today에 저장
    {
        today = new Date(today.getFullYear(), today.getMonth() + 1, today.getDate());
        build();
    }

    function build() {
        var nMonth = new Date(today.getFullYear(), today.getMonth(), 1); //현재달의 첫째 날
        var lastDate = new Date(today.getFullYear(), today.getMonth() + 1, 0); //현재 달의 마지막 날
        var tbcal = document.getElementById("calendar"); // 테이블 달력을 만들 테이블
        var yearmonth = document.getElementById("yearmonth"); //  년도와 월 출력할곳
        yearmonth.innerHTML = "<font color=#FFFFFF>" + today.getFullYear() + "년 " + (today.getMonth() + 1) + "월"; //년도와 월 출력

        if (today.getMonth() + 1 == 12) //  눌렀을 때 월이 넘어가는 곳
        {
            before.innerHTML = (today.getMonth()) + "월";
            next.innerHTML = "1월";
        }
        else if (today.getMonth() + 1 == 1) //  1월 일 때
        {
            before.innerHTML = "12월";
            next.innerHTML = (today.getMonth() + 2) + "월";
        }
        else //   12월 일 때
        {
            before.innerHTML = (today.getMonth()) + "월";
            next.innerHTML = (today.getMonth() + 2) + "월";
        }


        // 남은 테이블 줄 삭제
        while (tbcal.rows.length > 2) {
            tbcal.deleteRow(tbcal.rows.length - 1);
        }
        var row = null;
        row = tbcal.insertRow();
        var cnt = 0;

        // 1일 시작칸 찾기
        for (i = 0; i < nMonth.getDay(); i++) {
            cell = row.insertCell();
            cnt = cnt + 1;
        }

        // 달력 출력
        for (i = 1; i <= lastDate.getDate(); i++) // 1일부터 마지막 일까지
        {
            cell = row.insertCell();
            cell.innerHTML = "<font color=#FFFFF>" + i;
            cnt = cnt + 1;
            if (cnt % 7 == 1) {//일요일 계산
                cell.innerHTML = "<font color=#FF0000>" + i//일요일에 색
            }
            if (cnt % 7 == 0) { // 1주일이 7일 이므로 토요일 계산
                cell.innerHTML = "<font color=#0099FF>" + i//토요일에 색
                row = calendar.insertRow();// 줄 추가
            }
            if (today.getFullYear() == date.getFullYear() && today.getMonth() == date.getMonth() && i == date.getDate()) {
                cell.bgColor = "BBBBBB"; //오늘날짜배경색

            }
        }
    }

</script>
<table align="center" id="calendar" width="91%">

    <tr>

        <td width="13%">
            <font size=2%; color="#FFFFFF">
                <button onclick="beforem()" class="btn btn-block" id="before"></button>
            </font>
        </td>
        <td colspan="5" align="center" id="yearmonth"></td>
        <td width="13%"><font size=2%; color="#FFFFFF"><button onclick="nextm()" class="btn btn-block" id="next"></button></font></td>
    </tr>
    <tr>
        <td align="center" width="13%" height="40"> <font color="#FF0000">일</font></td>
        <td align="center" width="13%" height="40"> <font color="#FFFFFF">월</font></td>
        <td align="center" width="13%" height="40"> <font color="#FFFFFF">화</font></td>
        <td align="center" width="13%" height="40"> <font color="#FFFFFF">수</font></td>
        <td align="center" width="13%" height="40"> <font color="#FFFFFF">목</font></td>
        <td align="center" width="13%" height="40"> <font color="#FFFFFF">금</font></td>
        <td align="center" width="13%" height="40"><font color="#0099FF">토</font></td>
    </tr>
</table>


<section class="content">
    <div class="row">
        <div class="col-md-6">
            <!-- DONUT CHART -->
            <div class="box box-danger">
                <div class="box-header with-border">
                    <h3 class="box-title">공정별 평균근무시간</h3>

                    <div class="box-tools pull-right">
                        <button type="button" class="btn btn-box-tool" data-widget="collapse">
                            <i class="fa fa-minus"></i>
                        </button>
                        <button type="button" class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>
                    </div>
                </div>
                <div class="box-body">
                    <canvas id="pieChart" style="height:250px"></canvas>
                </div>
                <!-- /.box-body -->
            </div>
            <!-- /.box -->

        </div>
        <div class="col-md-6">
            <!-- Bar chart -->
            <div class="box box-primary">
                <div class="box-header with-border">
                    <i class="fa fa-bar-chart-o"></i>

                    <h3 class="box-title">이번달 많이 일한 근무자</h3>

                    <div class="box-tools pull-right">
                        <button type="button" class="btn btn-box-tool" data-widget="collapse">
                            <i class="fa fa-minus"></i>
                        </button>
                        <button type="button" class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>
                    </div>
                </div>
                <div class="box-body">
                    <div id="bar-chart" style="height: 237px;"></div>
                </div>
                <!-- /.box-body-->
            </div>
            <!-- /.box -->
        </div>
        <!-- /.col (RIGHT) -->
    </div>
    <!-- /.row -->
    <!-- BAR CHART -->
    <div class="box box-success">
        <div class="box-header with-border">
            <h3 class="box-title">Bar Chart</h3>

            <div class="box-tools pull-right">
                <button type="button" class="btn btn-box-tool" data-widget="collapse">
                    <i class="fa fa-minus"></i>
                </button>
                <button type="button" class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>
            </div>
        </div>
        <div class="box-body">
            <div class="chart">
                <canvas id="barChart" style="height:230px"></canvas>
            </div>
        </div>
        <!-- /.box-body -->
    </div>
    <!-- /.box -->

</section>
@{

    string data1 = ViewBag.data1;

    string data2 = ViewBag.data2;
    string piePCode = ViewBag.PCode;

    string labels = ViewBag.Labels;
    string barName1 = ViewBag.Name1;
    string barName2 = ViewBag.Name2;
    string barName3 = ViewBag.Name3;
    string bardata1 = ViewBag.bardata1;
    string bardata2 = ViewBag.bardata2;
    string bardata3 = ViewBag.bardata3;
}

@section Scripts {
    <script>
            function replaceAll(str, searchStr, replaceStr) {
              return str.split(searchStr).join(replaceStr);
            }

            $(document).ready(function () {
                /* ChartJS
                 * -------
                 * Here we will create a few charts using ChartJS
                 */

                //-------------
                //- PIE CHART -
                //-------------
                // Get context with jQuery - using jQuery's .get() method.

                var pieN = "@piePCode";
                var pieD = "@data2";

                var piearr = pieN.split(',');
                var piedataarr = pieD.split(',');
                //alert(piearr)
                //alert(piedataarr)
                var pieChartCanvas = $('#pieChart').get(0).getContext('2d')
                var pieChart = new Chart(pieChartCanvas)
                var PieData = [
                    {
                        value: piedataarr[0],
                        color: '#f56954',
                        highlight: '#f56954',
                        label: piearr[0]
                    },
                    {
                        value: piedataarr[1],
                        color: '#00a65a',
                        highlight: '#00a65a',
                        label: piearr[1]
                    },
                    {
                        value: piedataarr[2],
                        color: '#f39c12',
                        highlight: '#f39c12',
                        label: piearr[2]
                    },
                    {
                        value: piedataarr[3],
                        color: '#00c0ef',
                        highlight: '#00c0ef',
                        label: piearr[3]
                    }

                ]
                var pieOptions = {
                    //Boolean - Whether we should show a stroke on each segment
                    segmentShowStroke: true,
                    //String - The colour of each segment stroke
                    segmentStrokeColor: '#fff',
                    //Number - The width of each segment stroke
                    segmentStrokeWidth: 5,
                    //Number - The percentage of the chart that we cut out of the middle
                    percentageInnerCutout: 50, // This is 0 for Pie charts
                    //Number - Amount of animation steps
                    animationSteps: 100,
                    //String - Animation easing effect
                    animationEasing: 'easeOutBounce',
                    //Boolean - Whether we animate the rotation of the Doughnut
                    animateRotate: true,
                    //Boolean - Whether we animate scaling the Doughnut from the centre
                    animateScale: false,
                    //Boolean - whether to make the chart responsive to window resizing
                    responsive: true,
                    // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
                    maintainAspectRatio: true,
                    //String - A legend template
                    legendTemplate: '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'
                }
                //Create pie or douhnut chart
                // You can switch between pie and douhnut using the method below.
                pieChart.Doughnut(PieData, pieOptions)
            })
            /*
* BAR CHART
* ---------
*/
            var temp = "@data1";
            //var arrTemp = replaceAll(temp, "^", "'").split('|');
            var arrTemp = temp.split(',');
            var myArray = new Array(new Array(2), new Array(2), new Array(2), new Array(2), new Array(2));

            myArray[0][0] = arrTemp[0];
            myArray[0][1] = arrTemp[1];
            myArray[1][0] = arrTemp[2];
            myArray[1][1] = arrTemp[3];
            myArray[2][0] = arrTemp[4];
            myArray[2][1] = arrTemp[5];
            myArray[3][0] = arrTemp[6];
            myArray[3][1] = arrTemp[7];
            myArray[4][0] = arrTemp[8];
            myArray[4][1] = arrTemp[9];

            var bar_data = {
                data: myArray,
                color: '#3c8dbc'
            }
            $.plot('#bar-chart', [bar_data], {
                grid: {
                    borderWidth: 1,
                    borderColor: '#f3f3f3',
                    tickColor: '#f3f3f3'
                },
                series: {
                    bars: {
                        show: true,
                        barWidth: 0.5,
                        align: 'center'
                    }
                },
                xaxis: {
                    mode: 'categories',
                    tickLength: 0
                }
            })
            /* END BAR CHART */
            //-------------
    //- BAR CHART -
    //-------------
             var temp = "@labels";
             var arrTemp = temp.split(',');
      var areaChartData = {
      labels  : arrTemp,
      datasets: [
        {
          label               : '@barName1',
          fillColor           : 'rgba(210, 214, 222, 1)',
          strokeColor         : 'rgba(210, 214, 222, 1)',
          pointColor          : 'rgba(210, 214, 222, 1)',
          pointStrokeColor    : '#c1c7d1',
          pointHighlightFill  : '#fff',
          pointHighlightStroke: 'rgba(220,220,220,1)',
          data                : @bardata1
        },
        {
          label               : '@barName2',
          fillColor           : 'rgba(60,141,188,0.9)',
          strokeColor         : 'rgba(60,141,188,0.8)',
          pointColor          : '#3b8bba',
          pointStrokeColor    : 'rgba(60,141,188,1)',
          pointHighlightFill  : '#fff',
          pointHighlightStroke: 'rgba(60,141,188,1)',
          data                :  @bardata2
          },
        {
          label               : '@barName3',
          fillColor           : 'rgba(60,141,188,0.9)',
          strokeColor         : 'rgba(60,141,188,0.8)',
          pointColor          : '#3b8bba',
          pointStrokeColor    : 'rgba(60,141,188,1)',
          pointHighlightFill  : '#fff',
          pointHighlightStroke: 'rgba(60,141,188,1)',
          data                : @bardata3
        }
      ]
            }



    var barChartCanvas                   = $('#barChart').get(0).getContext('2d')
    var barChart                         = new Chart(barChartCanvas)
    var barChartData                     = areaChartData
    barChartData.datasets[1].fillColor   = '#00a65a'
    barChartData.datasets[1].strokeColor = '#00a65a'
    barChartData.datasets[1].pointColor  = '#00a65a'
    var barChartOptions                  = {
      //Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
      scaleBeginAtZero        : true,
      //Boolean - Whether grid lines are shown across the chart
      scaleShowGridLines      : true,
      //String - Colour of the grid lines
      scaleGridLineColor      : 'rgba(0,0,0,.05)',
      //Number - Width of the grid lines
      scaleGridLineWidth      : 1,
      //Boolean - Whether to show horizontal lines (except X axis)
      scaleShowHorizontalLines: true,
      //Boolean - Whether to show vertical lines (except Y axis)
      scaleShowVerticalLines  : true,
      //Boolean - If there is a stroke on each bar
      barShowStroke           : true,
      //Number - Pixel width of the bar stroke
      barStrokeWidth          : 2,
      //Number - Spacing between each of the X value sets
      barValueSpacing         : 5,
      //Number - Spacing between data sets within X values
      barDatasetSpacing       : 1,
      //String - A legend template
      legendTemplate          : '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].fillColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>',
      //Boolean - whether to make the chart responsive
      responsive              : true,
      maintainAspectRatio     : true
    }

    barChartOptions.datasetFill = false
    barChart.Bar(barChartData, barChartOptions)


            build();

    </script>
}
